@page "/User/AnswerSurvey"
@using DynamicSurveyWebApp.Model
@using DynamicSurveyWebApp.Dto
@inject HttpClient Http


<h3>AnswerSurvey</h3>

<br/>

<div class="container">
    
    <h6>Survey Id</h6>

    <input @bind-value="SurveyToGet" @bind-value:event="oninput" type="number" placeholder="Survey ID"/>
</div>

<br/>

<div class="container">
    
    <h6>User Id</h6>

    <input @bind-value="UserId" @bind-value:event="oninput" type="number" placeholder="User ID" />

</div>

<br/>

<div class="container">

    @if (SurveyToGet < 1)
    {
        <button @onclick="GetOneSurveyAsync" class="btn btn-outline-secondary disabled" disabled="disabled">Get Survey</button>
    }
    else
    {
        <button @onclick="GetOneSurveyAsync" class="btn btn-secondary">Get Survey</button>
    }
</div>



<br/>
<br/>

<div class="container">
    @if (SurveyToAnswer.Questions.Count > 0)
    {
        <h4>Question @(CurrentQuestionId + 1)</h4>
    }

    <span>
        @CurrentQuestion
    </span>
</div>

<br/>
<br/>

<div class="container">
    <input @bind-value="CurrentAnswer" @bind-value:event="oninput" type="text" placeholder="Enter Answer" width="100" height="100" size="100" />
</div>

<br/>
<br/>

<div class="container">

    @if (SurveyToAnswer.Questions.Count < 1 || string.IsNullOrWhiteSpace(CurrentAnswer))
    {
        <button @onclick="AddAnswer" class="btn btn-outline-primary disabled" disabled="disabled">Add</button>
    }
    else
    {
        <button @onclick="AddAnswer" class="btn btn-primary">Add</button>
    }

    @if (CurrentQuestionId <= SurveyToAnswer.Questions.Count-1 || UserId < 1)
    {
        <button @onclick="AnswerSurveyAsync" class="btn btn-outline-success disabled" disabled="disabled">Finish</button>
    }
    else
    {
        <button @onclick="AnswerSurveyAsync" class="btn btn-success">Finish</button>
    }
</div>

<br/>

<div class="container">
    <span>
        @Response
    </span>
</div>


@code {


    public int SurveyToGet { get; set; }

    public Survey SurveyToAnswer { get; set; }

    public string CurrentQuestion { get; set; }

    public int CurrentQuestionId { get; set; }

    public int UserId { get; set; }

    public string CurrentAnswer { get; set; }

    public AnswerSurveyDto AnswerForSurvey { get; set; }

    public string Response { get; set; }

    public async void GetOneSurveyAsync()
    {
        CurrentQuestionId = 0;

        GetOneSurveyResponseDto tempSurvey = await Http.GetFromJsonAsync<GetOneSurveyResponseDto>("http://localhost:57030/Api/Surveys/" + SurveyToGet);

        SurveyToAnswer = tempSurvey.Survey;

        CurrentQuestion = SurveyToAnswer.Questions[CurrentQuestionId].QuestionText;

        StateHasChanged();

    }

    public void AddAnswer()
    {
        Answer tempAnswer = new Answer
        {
            AnswerText = CurrentAnswer
        };

        SurveyToAnswer.Questions[CurrentQuestionId].Answer = tempAnswer;

        CurrentQuestionId++;

        if (!(CurrentQuestionId > SurveyToAnswer.Questions.Count-1))
        {
            CurrentQuestion = SurveyToAnswer.Questions[CurrentQuestionId].QuestionText;
        }
        else
        {
            CurrentQuestion = "Survey is Done";
        }

        CurrentAnswer = "";

    }

    public async void AnswerSurveyAsync()
    {
        foreach (Question question in SurveyToAnswer.Questions)
        {
            Tuple<string, int, string> tempTuple = new Tuple<string, int, string>(question.QuestionText, question.QuestionType, question.Answer.AnswerText);

            AnswerForSurvey.Answers.Add(tempTuple);
        }

        AnswerForSurvey.SurveyId = SurveyToAnswer.Id;
        AnswerForSurvey.Title = SurveyToAnswer.Title;
        AnswerForSurvey.UserId = UserId;

        HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("http://localhost:57030/Api/Surveys/Answer", AnswerForSurvey);

        AnswerSurveyResponseDto response = await responseMessage.Content.ReadFromJsonAsync<AnswerSurveyResponseDto>();

        Response = response.ResponseMessage;

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        SurveyToAnswer = new Survey();

        SurveyToAnswer.Questions = new List<Question>();

        AnswerForSurvey = new AnswerSurveyDto();

        AnswerForSurvey.Answers = new List<Tuple<string, int, string>>();

        CurrentQuestionId = 0;

    }
}
