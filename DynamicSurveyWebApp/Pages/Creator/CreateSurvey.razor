@page "/creator/createsurvey"
@using DynamicSurveyWebApp.Dto
@inject HttpClient Http

<h3>CreateSurvey</h3>



<div class="container">
    <div>
        <h6>Creator Id</h6>
        <input @bind-value="SurveyDto.CreatorId" @bind-value:event="oninput" type="number" placeholder="Creator Id"/>
    </div>
    
    <br/>

    <div>
        <h6>Title</h6>
        <input @bind-value="SurveyDto.Title" @bind-value:event="oninput" type="text" placeholder="Enter Survey Title" width="100" height="100" size="100"/>
    </div>
</div>

<br/>

<div class="container">
    <h6>Question</h6>
    <input @bind-value="QuestionText" @bind-value:event="oninput" name="QuestionText" type="text" placeholder="Enter Question" width="100" height="100" size="100" />
</div>

<br/>

<div class="container">

    @if (string.IsNullOrWhiteSpace(QuestionText))
    {
        <button @onclick="AddQuestion" class="btn btn-outline-primary disabled" disabled="disabled">Add</button>
    }
    else
    {
        <button @onclick="AddQuestion" class="btn btn-primary">Add</button>
    }

    @if (SurveyDto.CreatorId < 1 || SurveyDto.Questions.Count < 1 || string.IsNullOrWhiteSpace(SurveyDto.Title))
    {
        <button @onclick="CreateAsync" class="btn btn-outline-success disabled" disabled="disabled">Create</button>
    }
    else
    {
        <button @onclick="CreateAsync" class="btn btn-success">Create</button>
    }


</div>

<br/>

<div class="container">
    @if (string.IsNullOrWhiteSpace(Response) && SurveyDto.Questions.Count > 0)
    {
        <h5 class="p-3 text-center">Added Questions</h5>
        <table class="table table-striped table-bordered">
            <thead>
            <tr>
                <th>Number</th>
                <th>Question</th>
            </tr>
            </thead>
            <tbody>
            @for (int index = 0; index <= SurveyDto.Questions.Count-1; index++)
            {
                <tr>
                    <td>@(index+1)</td>
                    <td>@SurveyDto.Questions[index].Item1</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        @Response
    }
</div>





@code {


    public string QuestionText { get; set; }


    public CreateSurveyDto SurveyDto { get; set; }


    public string Response { get; set; }


    public void AddQuestion()
    {

        Tuple<string, int> questionTuple = new Tuple<string, int>(QuestionText, 1);

        SurveyDto.Questions.Add(questionTuple);

        QuestionText = "";

        //StateHasChanged();

    }

    public async void CreateAsync()
    {
        HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("http://localhost:57030/Api/Surveys", SurveyDto);

        CreateSurveyResponseDto response = await responseMessage.Content.ReadFromJsonAsync<CreateSurveyResponseDto>();

        Response = response.ResponseMessage;

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        SurveyDto = new CreateSurveyDto();

        SurveyDto.Questions = new List<Tuple<string, int>>();

        SurveyDto.IsAnonymous = true;
    }
}
